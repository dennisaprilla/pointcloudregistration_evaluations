function [T_all, mean_dist] = icpnormal(moving, movingnormal, fixed, fixednormal, varargin)
%ICPNORMAL Summary of this function goes here
%   Detailed explanation goes here
p = inputParser;

addRequired( p, 'moving', ...
             @(x) validateattributes(x, {'double'}, {'nrows', 3}) );
addRequired( p, 'fixed', ...
             @(x) validateattributes(x, {'double'}, {'nrows', 3}) );
addRequired( p, 'movingnormal', zeros(3,1), ...
              @(x) validateattributes(x, {'double'}, {'nrows', 3}) );
addRequired( p, 'fixednormal', zeros(3,1), ...
              @(x) validateattributes(x, {'double'}, {'nrows', 3}) );
addOptional( p, 'movingdebug', zeros(3,1), ...
             @(x) validateattributes(x, {'double'}, {'nrows', 3}) );
         
addParameter( p, 'iteration', 1, ...
              @(x) isnumeric(x) );
addParameter( p, 'threshold', 1, ...
              @(x) isnumeric(x) );
addParameter( p, 'normalratio', 1, ...
              @(x) isnumeric(x) );
addParameter( p, 'ransacdistance', 1, ...
              @(x) isnumeric(x) );

% renaming variable
U_breve_current      = p.Results.movingdebug;
U_noised_current     = moving;
U_hat_noised_current = movingnormal;
Y_breve              = fixed;
Y_breve_hat_current  = fixednormal;

% renaming parameter
max_iter       = p.Results.iteration;
threshold      = p.Results.threshold;
normalratio    = p.Results.normalratio;
ransacdistance = p.Results.ransacdistance;

% initialization
T_all                = eye(4);


end

