        figure2 = figure('Name', 'ICP Normal Registration', 'Position', [0 0 350 780]);
        axes2 = axes('Parent', figure2);
        plot3( axes2, ...
               U_breve(:,1), ...
               U_breve(:,2), ...
               U_breve(:,3), ...
               '.', 'Color', [0.7 0.7 0.7], ...
               'MarkerSize', 0.1, ...
               'Tag', 'plot2_Ubreve');
        grid on; axis equal; hold on;
        xlabel('X'); ylabel('Y'); zlabel('Z');
        plot3( axes2, ...
               U_noised(:,1), ...
               U_noised(:,2), ...
               U_noised(:,3), ...
               'or', ...
               'Tag', 'plot2_U_noised');
        quiver3(axes2, ...
                U_noised(:,1),     U_noised(:,2),     U_noised(:,3), ...
                U_hat_noised(:,1), U_hat_noised(:,2), U_hat_noised(:,3), 0.1, ...
                'Tag', 'plot2_Uhat_noised');
        plot3( axes2, ...
               Y_breve(:,1), ...
               Y_breve(:,2), ...
               Y_breve(:,3), ...
               '.g', 'MarkerSize', 0.1, ...
               'Tag', 'plot2_Ybreve');           
        
        % parameter
        max_iter  = 100;
        threshold = 1;
        normalratio = 0.05;
        ransacdistance = 5;
        % initialization
        U_breve_current      = U_breve;
        U_noised_current     = U_noised;
        U_hat_noised_current = U_hat_noised * ptCloud_scale;
        Y_breve_hat_current  = Y_breve_hat * ptCloud_scale;
        T_all                = eye(4);
        % start iteration
        for i=1:max_iter
            % construct the current point position and orientation
            % moving    = U_noised_current;
            % fixed     = Y_breve;
            moving    = [U_noised_current, U_hat_noised_current * normalratio];
            fixed     = [Y_breve, Y_breve_hat_current * normalratio];
            % search for correspondences using normal
            nearest_idx   = knnsearch(fixed, moving, 'Distance', 'euclidean');
            nearest_point = Y_breve(nearest_idx, :);
            
            % plot
            plot3( axes2, ...
                   nearest_point(:,1), ...
                   nearest_point(:,2), ...
                   nearest_point(:,3), ...
                   'dr', 'MarkerFaceColor', 'm', ...
                   'Tag', 'plot2_pointpair');
            for j=1:size(U_noised_current,1)
                temp_pointPair = [U_noised_current(j,:); nearest_point(j,:)];
                plot3( axes2, temp_pointPair(:,1), temp_pointPair(:,2), temp_pointPair(:,3), ...
                       '-m', 'Tag', 'plot2_pointpair');
            end       
            
            % estimate the transformation
            try
                tform = estimateGeometricTransform3D( U_noised_current, ...
                                                      nearest_point, ...
                                                      'rigid', ...
                                                      'MaxDistance', ransacdistance );
            catch
                warning('icpnormal encounter a problem: not enough inlier to estimate tform');
                continue;
            end
            % rearange the T (because i like this kind of form) and store it
            T_current = tform.T';
            T_all     = T_current * T_all;
            % extract the T and transform
            t_current = T_current(1:3, 4);
            R_current = T_current(1:3, 1:3);
            U_noised_current     = (R_current * U_noised_current' + t_current)';
            U_hat_noised_current = (R_current * U_hat_noised_current')';
            % transform Ubreve so we know what is happening
            U_breve_current      = (R_current * U_breve_current' + t_current)';
            
            % plot
            delete(findobj('Tag', 'plot2_pointpair'));
            delete(findobj('Tag', 'plot2_Ubreve'));
            delete(findobj('Tag', 'plot2_U_noised'));
            delete(findobj('Tag', 'plot2_Uhat_noised'));
            plot3( axes2, ...
                   U_breve_current(:,1), ...
                   U_breve_current(:,2), ...
                   U_breve_current(:,3), ...
                   '.', 'Color', [0.7 0.7 0.7], ...
                   'MarkerSize', 0.1, ...
                   'Tag', 'plot2_Ubreve');
            plot3( axes2, ...
                   U_noised_current(:,1), ...
                   U_noised_current(:,2), ...
                   U_noised_current(:,3), ...
                   'or', ...
                   'Tag', 'plot2_U_noised');
            quiver3(axes2, ...
                    U_noised_current(:,1),     U_noised_current(:,2),     U_noised_current(:,3), ...
                    U_hat_noised_current(:,1), U_hat_noised_current(:,2), U_hat_noised_current(:,3), 0.1, ...
                    'Tag', 'plot2_Uhat_noised');
            
            % calculate rmse
            rmse_current =  mean(sqrt(sum((U_noised_current - nearest_point).^2)));
            % breaking point
            if (rmse_current<threshold)
                break;
            end
            
            drawnow;
        end
        
        % store the rmse
        rmse_measurement = rmse_current;